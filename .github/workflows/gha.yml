#eeeeggc

name: WIN
on: [push]

env:
    GITHUB_REPO:    pmem/libpmemobj-cpp
    DOCKERHUB_REPO: pmem/libpmemobj-cpp

jobs:
  windows:
    name: Windows
    runs-on: self-hosted
    env:
      platform: x64
      VCPKG_DEFAULT_TRIPLET: x64-windows
      GENERATOR: "Visual Studio 16 2019"
      PMDK_DIR: "C:\\vcpkg\\packages\\pmdk_x64-windows"
      PMDK_BIN: "C:\\vcpkg\\packages\\pmdk_x64-windows\\bin;C:\\vcpkg\\packages\\pmdk_x64-windows\\debug\\bin"
      PMDK_VERSION: "1.7"
      WORKDIR: "D:/a/libpmemobj-cpp/libpmemobj-cpp/"
      MSBUILD: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin"
      DLLS:    "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Redist\\MSVC\\14.24.28127\\x64\\Microsoft.VC142.CRT;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Redist\\MSVC\\14.24.28127\\debug_nonredist\\x86\\Microsoft.VC142.DebugCRT"
      VCPKG: "C:\\yan\\github actions\\vcpkg"
      CMAKE: "C:\\Program Files\\CMake\\bin"
    strategy:
      matrix:
        CONFIG: [Debug] # , Release]
    steps:
       - name: Update PATH
         run: |
           echo "::add-path::$Env:MSBUILD"
           echo "::add-path::$Env:PMDK_DIR"
           echo "::add-path::$Env:PMDK_BIN"
           echo "::add-path::$Env:DLLS"
           echo "::add-path::$Env:VCPKG"
           echo "::add-path::$Env:CMAKE"
     
       - run: $Env:Path
   
       - name: Cache vcpkg packages
         uses: actions/cache@v1
         id: cache-vcpkg
         with:
            path: C:/vcpkg/packages
            key:  pmdk-1.7
       - name: Cache CPP
         uses: actions/cache@v1
         id: cache-cpp
         with:
            path: D:/a/libpmemobj-cpp/libpmemobj-cpp
            key:  cpp-v2

       - name: Clone the git repo
         #if: steps.cache-cpp.outputs.cache-hit != 'true'
         uses: actions/checkout@v1

       - name: Install PMDK
         if: steps.cache-vcpkg.outputs.cache-hit != 'true'
         run: |
            vcpkg install pmdk:x64-windows
            vcpkg install sfml:x64-windows

       - run: vcpkg integrate install

       - name: Configure
         #if: steps.cache-cpp.outputs.cache-hit != 'true'
         run: cmake . -Bbuild -G "${env:GENERATOR}" -DCMAKE_TOOLCHAIN_FILE="C:/yan/github actions/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_INSTALL_PREFIX=c:/install/libpmemobj-cpp -DTESTS_USE_FORCED_PMEM=ON -DLIBPMEMOBJ_VERSION="${env:PMDK_VERSION}" -DCMAKE_PREFIX_PATH="${env:PMDK_DIR}"

       - name: Build
         #if: steps.cache-cpp.outputs.cache-hit != 'true'
         run: msbuild build/ALL_BUILD.vcxproj /property:Configuration=${{ matrix.CONFIG }} /verbosity:minimal
       - name: Test
         shell: cmd
         run: |
           "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\SDK\\ScopeCppSDK\\vc15\\VC\\bin\\dumpbin.exe" /DEPENDENTS D:/a/libpmemobj-cpp/libpmemobj-cpp/build/tests/Debug/ex-queue.exe
           echo "================================="
           where libpmemobj.dll
           echo "================================="
           where MSVCP140D.dll
           echo "================================="
           where VCRUNTIME140D.dll
           echo "================================="
           where VCRUNTIME140_1D.dll
           echo "================================="
           where ucrtbased.dll
           echo "================================="
           where KERNEL32.dll
           echo "================================="
           echo ">>> 1"
           D:/a/libpmemobj-cpp/libpmemobj-cpp/build/tests/Debug/ex-queue.exe ./testfile push 1
           echo ">>> 2"
           D:/a/libpmemobj-cpp/libpmemobj-cpp/build/tests/Debug/ex-queue.exe ./testfile show
           echo ">>> 3"
           D:/a/libpmemobj-cpp/libpmemobj-cpp/build/tests/Debug/ex-queue.exe ./testfile pop
           echo ">>> 4"
           D:/a/libpmemobj-cpp/libpmemobj-cpp/build/tests/Debug/ex-queue.exe ./testfile show
           echo ">>> 5 "
           D:/a/libpmemobj-cpp/libpmemobj-cpp/build/tests/Debug/ex-queue.exe ./testfile;push;1
           echo "cd build"
           cd build
           echo "ctest -I 1,1 -C ${{ matrix.CONFIG }} --output-on-failure --timeout 540"
           ctest -I 1,1 -C ${{ matrix.CONFIG }} -V --timeout 540
     
       
       
       

       
  
